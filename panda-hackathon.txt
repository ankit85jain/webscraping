Create a series named heights_A with values 176.2, 158.4, 167.6, 156.2, and 161.4.
These values represent heights of 5 students of class A.

Label each student as s1, s2, s3, s4, and s5.

Create another series named weights_A with values 85.1, 90.2, 76.8, 80.4, and 78.9. These values represent weights of 5 students of class A.

Label each student as s1, s2, s3, s4, and s5.

Create a Data Frame named df_A, which holds the height and weight of five students namely s1, s2, s3, s4 and s5.

Label the columns as Student_height and Student_weight, respectively.

Write the contents of df_A to a CSV file named classA.csv.

Hint: Use to_csv method associated with a data frame.
Verify if the file classA.csv exists in present directory using command ls -l.

You can also view the contents of it using command cat classA.csv

1
import pandas as pd

heights_A = pd.Series(data=[176.2, 158.4, 167.6, 156.2, 161.4] ,index=('s1', 's2', 's3', 's4', 's5'))
print(heights_A[1])

2
import pandas as pd

heights_A = pd.Series(data=[176.2, 158.4, 167.6, 156.2, 161.4] ,index=('s1', 's2', 's3', 's4', 's5'))
print(heights_A[1:4])
3
import pandas as pd

heights_A = pd.Series(data=[176.2, 158.4, 167.6, 156.2, 161.4] ,index=('s1', 's2', 's3', 's4', 's5'))
weights_A = pd.Series(data=[85.1, 90.2, 76.8, 80.4, 78.9] ,index=('s1', 's2', 's3', 's4', 's5'))
df_A=pd.concat([heights_A,weights_A], axis=1, sort=False)
df_A.columns=["Student_height","Student_weight"]
height=df_A["Student_height"]
print(type(height))

4
import pandas as pd

heights_A = pd.Series(data=[176.2, 158.4, 167.6, 156.2, 161.4] ,index=('s1', 's2', 's3', 's4', 's5'))
weights_A = pd.Series(data=[85.1, 90.2, 76.8, 80.4, 78.9] ,index=('s1', 's2', 's3', 's4', 's5'))
df_A=pd.concat([heights_A,weights_A], axis=1, sort=False)
df_A.columns=["Student_height","Student_weight"]
df_s1s2=df_A.iloc[0:2,:]
print(df_s1s2)

5
import pandas as pd

heights_A = pd.Series(data=[176.2, 158.4, 167.6, 156.2, 161.4] ,index=('s1', 's2', 's3', 's4', 's5'))
weights_A = pd.Series(data=[85.1, 90.2, 76.8, 80.4, 78.9] ,index=('s1', 's2', 's3', 's4', 's5'))
df_A=pd.concat([heights_A,weights_A], axis=1, sort=False)
df_A.columns=["Student_height","Student_weight"]
df_s2s5s1=df_A.loc[['s2','s5','s1'],:]
print(df_s2s5s1)

6
import pandas as pd

heights_A = pd.Series(data=[176.2, 158.4, 167.6, 156.2, 161.4] ,index=('s1', 's2', 's3', 's4', 's5'))
weights_A = pd.Series(data=[85.1, 90.2, 76.8, 80.4, 78.9] ,index=('s1', 's2', 's3', 's4', 's5'))
df_A=pd.concat([heights_A,weights_A], axis=1, sort=False)
df_A.columns=["Student_height","Student_weight"]
df_s1s4=df_A.loc[['s1','s4'],:]
 
print(df_s1s4)

-----data cleaning

1
import pandas as pd
import numpy as np
heights_A = pd.Series(data=[176.2, 158.4, 167.6, 156.2, 161.4] ,index=('s1', 's2', 's3', 's4', 's5'))
weights_A = pd.Series(data=[85.1, 90.2, 76.8, 80.4, 78.9] ,index=('s1', 's2', 's3', 's4', 's5'))
df_A=pd.concat([heights_A,weights_A], axis=1, sort=False)
df_A.columns=["Student_height","Student_weight"]
df_A.loc['s3']=np.nan
df_A.loc['s5']["Student_weight"]=np.nan
df_A2=df_A.dropna()
print(df_A2)

----aggregation


1
import pandas as pd
import numpy as np
heights_A = pd.Series(data=[176.2, 158.4, 167.6, 156.2, 161.4] ,index=('s1', 's2', 's3', 's4', 's5'))
weights_A = pd.Series(data=[85.1, 90.2, 76.8, 80.4, 78.9] ,index=('s1', 's2', 's3', 's4', 's5'))
df_A=pd.concat([heights_A,weights_A], axis=1, sort=False)
df_A.columns=["Student_height","Student_weight"]
df_A_filter11=df_A[df_A["Student_height"] > 160.0]
df_A_filter1=df_A_filter11[df_A_filter11["Student_weight"] < 80.0]
print(df_A_filter1)
df_A_filter2=df_A_filter1[df_A_filter1.index.str.endswith('5')]
print(df_A_filter2)

df_A['Gender'] = ['M', 'F', 'M', 'M', 'F']

df_groups=df_A.groupby('Gender')
print(df_groups.mean())
-------data structure---

1
import pandas as pd
import numpy as np
heights_A = pd.Series(data=[176.2, 158.4, 167.6, 156.2, 161.4] ,index=('s1', 's2', 's3', 's4', 's5'))
weights_A = pd.Series(data=[85.1, 90.2, 76.8, 80.4, 78.9] ,index=('s1', 's2', 's3', 's4', 's5'))
df_A=pd.concat([heights_A,weights_A], axis=1, sort=False)
df_A.columns=["Student_height","Student_weight"]
print(heights_A.shape)

2
import pandas as pd
import numpy as np
heights_A = pd.Series(data=[176.2, 158.4, 167.6, 156.2, 161.4] ,index=('s1', 's2', 's3', 's4', 's5'))
weights_A = pd.Series(data=[85.1, 90.2, 76.8, 80.4, 78.9] ,index=('s1', 's2', 's3', 's4', 's5'))
df_A=pd.concat([heights_A,weights_A], axis=1, sort=False)
df_A.columns=["Student_height","Student_weight"]
print(weights_A.dtype)
3
print(df_A.shape)

4


import random
import numpy as np
np.random.seed(100)
s1=np.random.normal(170, 25,5)
np.random.seed(100)
s2=np.random.normal(75, 12,5)

heights_B = pd.Series(s1 ,index=('s1', 's2', 's3', 's4', 's5'))
weights_B = pd.Series(s2 ,index=('s1', 's2', 's3', 's4', 's5'))
df_B=pd.concat([heights_B,weights_B], axis=1, sort=False)
df_B.columns=["Student_height","Student_weight"]
print(heights_B.mean())
5
print(df_B.columns)

6

data={'ClassA':df_A,'ClassB':df_B}
p=pd.Panel(data)
print(p.shape)
----------csv-------
1
import pandas as pd

heights_A = pd.Series(data=[176.2, 158.4, 167.6, 156.2, 161.4] ,index=('s1', 's2', 's3', 's4', 's5'))
weights_A = pd.Series(data=[85.1, 90.2, 76.8, 80.4, 78.9] ,index=('s1', 's2', 's3', 's4', 's5'))
df_A=pd.concat([heights_A,weights_A], axis=1, sort=False)
df_A.columns=["Student_height","Student_weight"]
df_A.to_csv('classA.csv')
2
df_A2=pd.read_csv('classA.csv')
print(df_A2)

3
df_A3=pd.read_csv('classA.csv', index_col=[0])
print(df_A3)

4
import random
import numpy as np
np.random.seed(100)
s1=np.random.normal(170, 25,5)
np.random.seed(100)
s2=np.random.normal(75, 12,5)

heights_B = pd.Series(s1 ,index=('s1', 's2', 's3', 's4', 's5'))
weights_B = pd.Series(s2 ,index=('s1', 's2', 's3', 's4', 's5'))
df_B=pd.concat([heights_B,weights_B], axis=1, sort=False)
df_B.columns=["Student_height","Student_weight"]
df_B.to_csv('classB.csv',index=False)
5
df_B2=pd.read_csv('classB.csv')
print(df_B2)
6

df_B3=pd.read_csv('classB.csv', header=None)
print(df_B3)
7

df_B4=pd.read_csv('classB.csv', header=None,skiprows=2)
print(df_B4)


Create another Series named heights_B from a 1-D numpy array of 5 elements derived from the 	 of mean 170.0 and standard deviation 25.0.

Note : Set random seed to 100, before creating heights_B series. Use numpy.
Create another Series named weights_B from a 1-D numpy array of 5 elements derived from the normal distribution of mean 75.0 and standard deviation 12.0.

Note : Set once again random seed to 100, before creating weights_B series. Use numpy.
Label both Series elements with s1, s2, s3, s4 and s5.

Create a Data Frame df_B holding height and weight of students s1, s2, s3, s4 and s5 belonging to class B.

Label the columns as Student_height and Student_weight respectively.

Write the contents of df_B, without the index, to a CSV file named classB.csv.

Hint: Make Use of index argument of to_csv method.
Verify if the file classB.csv exists in present directory using the command ls -1

Display the contents of classB.csv using command cat classB.csv.



------------------data merge1
Task 1
Create a series named heights_A with values 176.2, 158.4, 167.6, 156.2, and 161.4.
These values represent heights of 5 students of class A.

Label each student as s1, s2, s3, s4, and s5.

Create another series named weights_A with values 85.1, 90.2, 76.8, 80.4, and 78.9. These values represent weights of 5 students of class A.

Label each student as s1, s2, s3, s4, and s5.

Create a Data Frame named df_A, which holds the height and weight of five students namely s1, s2, s3, s4 and s5.

Label the columns as Student_height and Student_weight, respectively.

Add a new column Gender to data frame df_A with values ['M', 'F', 'M', 'M', 'F']

Create another Series s, from a list [165.4, 82.7, 'F'].

Provide the following list of values to argument index. ['Student_height', 'Student_weight', 'Gender']

Set the value of name argument of series, s, to s6.

Append the series s to data frame df_A and store the captured array in df_AA.

Display data frame df_AA.

import pandas as pd

heights_A = pd.Series(data=[176.2, 158.4, 167.6, 156.2, 161.4] ,index=('s1', 's2', 's3', 's4', 's5'))
weights_A = pd.Series(data=[85.1, 90.2, 76.8, 80.4, 78.9] ,index=('s1', 's2', 's3', 's4', 's5'))
df_A=pd.concat([heights_A,weights_A], axis=1, sort=False)
df_A.columns=["Student_height","Student_weight"]
df_A['Gender']=['M', 'F', 'M', 'M', 'F']
s= pd.Series([165.4, 82.7, 'F'] ,name='s6',index=['Student_height', 'Student_weight', 'Gender'])
df_AA=df_A.append(s)
print(df_AA)

2
Create another Series named heights_B from a 1-D numpy array of 5 elements derived from the normal distribution of mean 170.0 and standard deviation 25.0.

Note : Set random seed to 100, before creating heights_B series.
Create another Series named weights_B from a 1-D numpy array of 5 elements derived from the normal distribution of mean 75.0 and standard deviation 12.0.

Label both Series elements with s1, s2, s3, s4 and s5.

Create a Data Frame df_B holding height and weight of students s1, s2, s3, s4 and s5 belonging to class B.

Label the columns as Student_height and Student_weight respectively.

Change the index of df_B to [ 's7', 's8', 's9', 's10', 's11'].

Create the Gender column in df_B with values ['F', 'M', 'F', 'F', 'M'].
Concatenate two data frames df_AA and df_B and assign the result to df.
Hint: use concat method of pandas.
Display dataframe df


import random
import numpy as np
np.random.seed(100)
s1=np.random.normal(170.0, 25.0,5)

s2=np.random.normal(75.0, 12.0,5)

heights_B = pd.Series(s1 ,index=('s1', 's2', 's3', 's4', 's5'))
weights_B = pd.Series(s2 ,index=('s1', 's2', 's3', 's4', 's5'))
df_B=pd.concat([heights_B,weights_B], axis=1, sort=False)
df_B.columns=["Student_height","Student_weight"]
df_B.index=[ 's7', 's8', 's9', 's10', 's11']
df_B['Gender']= ['F', 'M', 'F', 'F', 'M']
df=pd.concat([df_AA,df_B])
print(df)


----------------dta merge2
Task 1
Create the following two Series. nameid = pd.Series(range(101, 111))

name = pd.Series(['person' + str(i) for i in range(1, 11)])

Create the data frame master with series nameid and name. Let the column names be nameid and name respectively.

Create the data frame transaction using below command. transaction = pd.DataFrame({'nameid':[108, 108, 108,103], 'product':['iPhone', 'Nokia', 'Micromax', 'Vivo']})

Merge master with transaction on nameid and save the merged data frame as mdf. perform inner join.

Hint: use merge method.
Display mdf
import pandas as pd
nameid = pd.Series(range(101, 111))

name = pd.Series(['person' + str(i) for i in range(1, 11)])

master= pd.DataFrame({'nameid':nameid,'name':name})
#print(master)
transaction = pd.DataFrame({'nameid':[108, 108, 108,103], 'product':['iPhone', 'Nokia', 'Micromax', 'Vivo']})

mdf=master.merge(transaction)
print(mdf)




-------index1

1
Create an index named dates, representing a range of dates starting from 1-Sep-2017 to 15-Sep-2017.

Hint: use date_range method of pandas.

Print 3rd element of the created DateTimeIndex.


import pandas as pd
indx=pd.date_range(start='01-Sep-2017',end='15-Sep-2017')
print(indx[2])


2
Convert the following list of date strings into datetime objects. datelist = ['14-Sep-2017', '9-Sep-2017']
Hint: Use to_datetime method of pandas.
Capture the result in variable 'dates_to_be_searched' and print it.

datelist = ['14-Sep-2017', '9-Sep-2017']
dates_to_be_searched=pd.to_datetime(datelist)
print(dates_to_be_searched)

3
print(dates_to_be_searched.isin(indx))

4

arraylist = [['classA']*5 + ['classB']*5, ['s1', 's2', 's3','s4', 's5']*2]
mi_index=pd.MultiIndex.from_arrays(arraylist, names=('number', 'color'))
print(mi_index.levels)